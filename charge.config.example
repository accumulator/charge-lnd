[default]
strategy = static
base_fee_msat = 1000
fee_ppm = 10

[ignored_channels]
# don't let charge-lnd set fees (strategy=ignore) for channels to/from the specified nodes
node.id = 02da8d5a759ee9e4438da617cfdb61c87f723fb76c4b6371b877d0347abe953a4f,
  0266ad254117f16f16c3457e081e6207e91c5e414477a208cf4d9c633322799038

strategy = ignore

[expensive]
# match channels where the peer node has set a high (>=8000 ppm) fee rate
# and set the same fee rate on our side (strategy=match_peer)
chan.min_fee_ppm = 8000

strategy = match_peer

[leafnode]
# charge non-routing (private=true) peers a bit more for our service
chan.private = true

strategy = static
base_fee_msat = 1000
fee_ppm = 100

[beginner-node]
# set lower fees on channels with smaller peers, that have few channels (4-8 channels) total
# and limited node size (max_capacity=1000000)
node.max_capacity = 1000000
node.min_channels = 4
node.max_channels = 8

strategy = static
base_fee_msat = 0
fee_ppm = 1

[encourage-routing]
# 'autobalance' (lower fees so using outbound is more attractive) larger channels (min_capacity 2M sats)
# to larger nodes (node has at least 5M sats) if balance ratio >= 0.9 (more than 90% on our side)
chan.min_ratio = 0.9
chan.min_capacity = 2000000
node.min_capacity = 50000000

strategy = static
base_fee_msat = 500
fee_ppm = 5

[discourage-routing]
# 'autobalance' (higher fees so using outbound is less attractive) larger channels (min_capacity 2M sats)
# to larger nodes (node has at least 5M sats) if balance ratio <= 0.2 (less than 20% on our side)
chan.max_ratio = 0.2
chan.min_capacity = 2000000
node.min_capacity = 50000000

strategy = static
base_fee_msat = 10000
fee_ppm = 500

[proportional]
# 'proportional' can also be used to auto balance (lower fee rate when low remote balance & higher rate when higher remote balance)
# fee_ppm decreases linearly with the channel balance ratio (fee_ppm_min when ratio is 1, fee_ppm_max when ratio is 0)
# the optional min_fee_ppm_delta avoids updates that are will change less than the specified amount
chan.min_ratio = 0.2
chan.max_ratio = 0.9
chan.min_capacity = 1000000

strategy = proportional
base_fee_msat = 1000
min_fee_ppm = 10
max_fee_ppm = 200
min_fee_ppm_delta = 10

[pool-policy]
# use a list of channels exported from Lightning Pool to set a policy for channels that we initiated by selling liquidity using Lightning Pool
chan.id = file:///home/lnd/pool-channels.txt

strategy = static
base_fee_msat = 500
fee_ppm = 1

[recover-cost]
# use cost strategy if we are the initiator, using a base fee of 1 sat, and a cost_factor of 1.5 to recover 150% of costs when
# channel is depleted to 100% outgoing
chan.initiator = true

strategy = cost
base_fee_msat = 1000
cost_factor = 1.5

#[on-chain-competitive]
# (commented out this policy as it doesn't work without setting --electrum-server command line option and we want this example to be be able to be used as-is)
# If an on-chain TX of 0.1 BTC within 6 blocks would amount to a 0.0001 fee (=0.1%), this policy sets the channel fee to 0.1% (or 1000 ppm)
#node.id = 03864ef025fde8fb587d989186ce6a4a186895ee44a926bfc370e2c366597a3f8f
#strategy = onchain_fee
#base_fee_msat = 1000
#onchain_fee_btc = 0.1
#onchain_fee_numblocks = 6

[micropayments-only]
# set max_htlc_msat to 1000 sat (1M msat)
chan.id = 636374x680x1
strategy = static
base_fee_msat = 1000
fee_ppm = 10
max_htlc_msat = 1000000
